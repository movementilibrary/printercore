pipeline {
    agent any

    environment {
        DEPLOY_PASS     = credentials('deploy_pass')
        DEPLOY_USER     = credentials('deploy_user')
        AZURE_SUBSCRIPTION_ID = credentials('azureSubscriptionId')
        AZURE_TENANT_ID = credentials('azureTenantId')
        AZURE_APP_ID = credentials('azureAppId')
        AZURE_APP_PASS = credentials('azureAppPass')
        SONAR_TOKEN     = credentials('sonar_token')
        SONAR_URL       = credentials('sonar_url')
        NEXUS_BASE_URL = credentials('nexus_base_url')
        NEXUS_USER = credentials('nexus_user')
        NEXUS_PASS = credentials('nexus_pass')
        DOCKER_REPOSITORY = credentials('DOCKER_REPOSITORY ')
        DOCKER_USER_LOGIN = credentials('DOCKER_USER_LOGIN ')
        DOCKER_USER_PASS = credentials('DOCKER_USER_PASS ')
        INFLUX_URL = credentials('INFLUX_URL')
        INFLUX_JMETER_PASSWORD = credentials('INFLUX_JMETER_PASSWORD')
        INFLUX_JMETER_USER = credentials('INFLUX_JMETER_USER')
        MONITORING_RESOURCE_GROUP = credentials('MONITORING_RESOURCE_GROUP')
    }

    stages {

        stage('DevOps-Tools'){
            steps {
                sh 'rm -rf check.status'
                checkout([$class: 'GitSCM', branches: [[name: '*/monitoring']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'devops-tools']], submoduleCfg: [], userRemoteConfigs: [[url: 'git@bitbucket.org:dasa_desenv_middleware/devops-tools.git']]])
            }
        }

        stage('Prepare Tests') {
            steps {
                sh 'devops-tools/pipeline-shared-librares/prepare_tests.sh'
            }
        }

        stage('Unit Test') {
            steps {
                sh 'devops-tools/pipeline-shared-librares/unit-tests.sh'
            }
        }

        stage('Tagging') {
            steps {
                sh 'bash -x devops-tools/pipeline-shared-librares/tagging.sh'
            }
        }

        stage('Quality Analyzing') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'bash -x devops-tools/pipeline-shared-librares/quality.sh -a analize'
                }
            }
        }

        stage('Build App') {
            steps {
                sh 'devops-tools/pipeline-shared-librares/build-package.sh'
            }
        }

        stage('Upload Artifact') {
            steps {
                sh 'bash -x devops-tools/pipeline-shared-librares/nexus-upload.sh'
            }
        }


        stage('Deploy Dev') {
            steps {
                sh 'bash -x devops-tools/pipeline-shared-librares/deploy.sh -a printer-core-api-dev -r RSG_K8S -e dev -i deploy -d cloud'
                sh 'bash -x devops-tools/pipeline-shared-librares/check_upstart_app.sh -u $URL_APP/actuator/health -s 200 -t 60 -c 5 -e dev'
                sh 'bash -x devops-tools/pipeline-shared-librares/sync_subdomains.sh -e dev'
            }
        }
//        stage('Accept Test Dev'){
//            steps{
//                echo 'bash -x devops-tools/pipeline-shared-librares/regression_tests.sh -e dev'
//                echo 'devops-tools/pipeline-shared-librares/slack_publish.sh -m "Testes de Aceite Realizados com Sucesso" -c "testeapi"'
//            }
//        }
//
//        stage('Performance Test Dev'){
//            steps{
//                echo 'bash -x devops-tools/pipeline-shared-librares/performance_tests.sh -j "4.0" -n "sre-backend-java" -d $URL_APP -e dev'
//            }
//        }
//        stage('Security Owasp Zap Dev') {
//            steps {
//                script {
//                    echo 'bash -x devops-tools/pipeline-shared-librares/security.sh -u $URL_APP/api/healthcheck -o owasp-rollout-dev'
//                }
//            }
//        }
//
//        stage('Quality Gates') {
//            steps {
//                withSonarQubeEnv('SonarQube') {
//                    sh 'bash -x devops-tools/pipeline-shared-librares/quality.sh -a gates'
//                }
//            }
//        }

        stage('Approved to hml') {
            steps {
                script {
                    def externalMethod = load("devops-tools/pipeline-shared-librares/groovy/utils-timeout.groovy")
                    externalMethod.executaTimeout('Package Approved to deploy in hml ? (Click "Proceed" to continue)')
                    sh 'bash -x devops-tools/pipeline-shared-librares/approved.sh -e hml'
                    sh 'bash -x devops-tools/pipeline-shared-librares/sync_subdomains.sh -e hml'
                }
            }
        }

        stage('Deploy Hml') {
            steps {
                sh 'bash -x devops-tools/pipeline-shared-librares/deploy.sh -a printer-core-api-hml -r RSG_K8S -e hml -i deploy -d cloud'
                sh 'bash -x devops-tools/pipeline-shared-librares/check_upstart_app.sh -u $URL_APP/api/healthcheck -s 200 -t 60 -c 5 -e hml'
            }
        }

//        stage('Accept Test Hml'){
//            steps{
//                echo 'bash -x devops-tools/pipeline-shared-librares/regression_tests.sh -e hml'
//                echo 'devops-tools/pipeline-shared-librares/slack_publish.sh -m "Testes de Aceite Realizados com Sucesso" -c "testeapi"'
//            }
//        }
//
//        stage('Performance Test Hml'){
//            steps{
//                echo 'bash -x devops-tools/pipeline-shared-librares/performance_tests.sh -j "4.0" -n "sre-backend-java" -d $URL_APP -e "hml"'
//            }
//        }
//
//        stage('Security Owasp Zap Hml') {
//            steps {
//                script {
//                    echo 'bash -x devops-tools/pipeline-shared-librares/security.sh -u $URL_APP/api/healthcheck -o owasp-rollout-hml'
//                }
//            }
//        }

//        stage('Approved to Prod') {
//            steps {
//                script {
//                    def externalMethod = load("devops-tools/pipeline-shared-librares/groovy/utils-timeout.groovy")
//                    externalMethod.executaTimeout('Package Approved to deploy in Prod? (Click "Proceed" to continue)')
//                    sh 'bash -x devops-tools/pipeline-shared-librares/approved.sh -e prd'
//                }
//            }
//        }

//        stage('Deploy Prod') {
//            steps {
//                sh 'bash -x devops-tools/pipeline-shared-librares/deploy.sh -a sre-backend-java-prod -r RSG_K8S -e prd -i deploy -d cloud'
//                sh 'ba  sh -x devops-tools/pipeline-shared-librares/check_upstart_app.sh -u $URL_APP/api/healthcheck -s 200 -t 60 -c 5 -e prd'
//                sh 'bash -x devops-tools/pipeline-shared-librares/sync_subdomains.sh -e prd'
//            }
//        }

//        stage('Performance Test Prod'){
//            steps{
//                echo 'bash -x devops-tools/pipeline-shared-librares/performance_tests.sh -j "4.0" -n "sre-backend-java" -d $URL_APP -e "prd"'
//            }
//        }
    }
}
